name: CI Pipeline - D-Care

on:
  push:
    # Mude para 'main' ou 'develop' quando estiver pronto
    branches:
      - fd-fix-conteineres-ci
      - qas
      - teste_ci_docker
  pull_request:

jobs:
    build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do Repositório
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Criar arquivo de ambiente (.env)
        run: |
          echo "PG_USER=${{ secrets.PG_USER }}" >> .env
          echo "PG_PASS=${{ secrets.PG_PASS }}" >> .env
          echo "PG_DB=${{ secrets.PG_DB }}" >> .env
          # 💥 CORREÇÃO: Adicionando DB_PORT para que o docker-compose consiga ler
          # o valor para o mapeamento de portas (ports: - "${DB_PORT}:5432").
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          
          # 💥 CORREÇÃO: Usando a porta interna 5432 na DATABASE_URL.
          # Dentro da rede Docker, o contêiner backend acessa o serviço 'pg-care'
          # sempre na porta padrão 5432.
          echo "DATABASE_URL=postgresql://${{ secrets.PG_USER }}:${{ secrets.PG_PASS }}@pg-care:5432/${{ secrets.PG_DB }}" >> .env
          
          echo "Conteúdo do .env:"
          cat .env

      - name: Build dos containers
        run: docker compose build

      - name: Iniciar os containers em background
        run: docker compose up -d

      - name: Aguardar o Banco de Dados (pg-care) ficar pronto
        run: |
          echo "Aguardando o container do banco de dados (pg-care) ficar saudável..."
          timeout 120 bash -c 'while [[ "$(docker inspect -f {{.State.Health.Status}} pg-care)" != "healthy" ]]; do echo -n "."; sleep 5; done'
          if [ $? -ne 0 ]; then
            echo "Erro: O banco de dados (pg-care) não ficou saudável dentro do tempo limite."
            exit 1
          fi
          echo "Banco de dados está pronto!"

      - name: Sincronizar Schema do Prisma para Teste (db push)
        run: |
          echo "Verificando memória no container backend antes do db push..."
          # Mantendo a verificação de memória (free -m) no container rodando a aplicação
          docker compose exec -T backend free -m
          
          echo "Iniciando prisma db push (usando 'run --rm' e 'user root' para resolver permissão)..."
          # 💥 CORREÇÃO PRINCIPAL: Adicionando --user root para resolver o erro EACCES/permission denied durante o prisma generate
          docker compose run --rm --user root backend npx prisma db push --accept-data-loss

      - name: Corrigir Permissão da Pasta Uploads
        # 💥 NOVA CORREÇÃO: Cria e define permissões 777 para a pasta 'uploads' para
        # resolver o erro EACCES durante a inicialização do NestJS (multer).
        run: |
          echo "Criando e ajustando permissões para a pasta /app/uploads..."
          docker compose exec -T backend mkdir -p /app/uploads
          docker compose exec -T backend chmod 777 /app/uploads

      - name: Aguardar o backend ficar saudável
        run: |
          echo "Aguardando o container do backend ficar saudável (aplicação pronta)..."
          
          # 💥 CORREÇÃO DE DEBUG: Aumentando o sleep e usando o nome do SERVIÇO ('backend')
          # para puxar os logs de forma mais robusta e debuggar o erro de inicialização.
          echo "Esperando 45 segundos e verificando logs do backend para erros de inicialização..."
          sleep 45
          docker compose logs backend

          # Inicia o loop de verificação de saúde (mantido em 300s)
          timeout 300 bash -c 'while [[ "$(docker inspect -f {{.State.Health.Status}} backend_dcare)" != "healthy" ]]; do echo -n "."; sleep 5; done'
          
          if [ $? -ne 0 ]; then
            echo "Erro: O backend não ficou saudável dentro do tempo limite (300s)."
            exit 1
          fi
          echo "Backend está saudável!"
          docker compose ps

      - name: Verificar logs dos containers (para depuração)
        run: docker compose logs

      - name: Executar testes de integração/E2E
        run: docker compose exec -T backend npm test

      - name: Parar os containers
        if: always()
        run: docker compose down
