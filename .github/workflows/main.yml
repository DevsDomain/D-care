name: CI Pipeline - D-Care

# Gatilhos para execução do workflow
on:
  push:
    # Mude para os branches principais quando o pipeline estiver estável
    branches:
      - fd-fix-conteineres-ci
      - qas
      - teste_ci_docker
  pull_request:

jobs:
  build-and-test:
    # O workflow será executado numa máquina virtual Ubuntu mais recente
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do código do repositório
      - name: Checkout do Repositório
        uses: actions/checkout@v4

      # 2. Configurar o Docker Buildx para builds otimizadas
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Criar o ficheiro .env com base nos secrets do GitHub
      - name: Criar arquivo de ambiente (.env)
        run: |
          echo "PG_USER=${{ secrets.PG_USER }}" >> .env
          echo "PG_PASS=${{ secrets.PG_PASS }}" >> .env
          echo "PG_DB=${{ secrets.PG_DB }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DATABASE_URL=postgresql://${{ secrets.PG_USER }}:${{ secrets.PG_PASS }}@pg-care:5432/${{ secrets.PG_DB }}" >> .env
          echo "Conteúdo do .env gerado:"
          cat .env

      # 4. Fazer o build das imagens Docker. Os testes são executados automaticamente nesta etapa, conforme definido no Dockerfile.
      - name: Build dos containers (testes inclusos)
        run: docker compose build

      # 5. Iniciar os contentores em modo "detached" (background)
      - name: Iniciar os containers em background
        run: docker compose up -d
          
      # 6. Aguardar que o contentor do banco de dados (pg-care) esteja saudável
      - name: Aguardar o Banco de Dados (pg-care) ficar pronto
        run: |
          echo "Aguardando o container do banco de dados (pg-care) ficar saudável..."
          timeout 120 bash -c 'while [[ "$(docker inspect -f {{.State.Health.Status}} pg-care)" != "healthy" ]]; do echo -n "."; sleep 5; done'
          if [ $? -ne 0 ]; then
            echo "Erro: O banco de dados (pg-care) não ficou saudável dentro do tempo limite."
            exit 1
          fi
          echo "Banco de dados está pronto!"

      # 7. Sincronizar o schema do Prisma com o banco de dados
      - name: Sincronizar Schema do Prisma (db push)
        run: |
          echo "Iniciando prisma db push..."
          docker compose run --rm --user root backend npx prisma db push --accept-data-loss
          echo "Schema do Prisma sincronizado."

      # 8. Aguardar que o contentor do backend esteja saudável
      - name: Aguardar o backend ficar saudável
        run: |
          echo "Aguardando o container do backend ficar saudável (aplicação pronta)..."
          echo "Aguardando 45 segundos e verificando logs do backend para erros de inicialização..."
          sleep 45
          docker compose logs backend

          timeout 300 bash -c 'while [[ "$(docker inspect -f {{.State.Health.Status}} backend_dcare)" != "healthy" ]]; do echo -n "."; sleep 5; done'
          
          if [ $? -ne 0 ]; then
            echo "Erro: O backend não ficou saudável dentro do tempo limite (300s)."
            exit 1
          fi
          echo "Backend está saudável!"
          docker compose ps

      # 9. Exibir logs para depuração (opcional, mas útil)
      - name: Verificar logs dos containers (para depuração)
        run: docker compose logs

      # 10. Parar e remover os contentores, redes e volumes
      - name: Parar os containers
        if: always()
        run: docker compose down
