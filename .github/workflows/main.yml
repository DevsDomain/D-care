name: CI Pipeline - D-Care

on:
  push:
    # Mude para 'main' ou 'develop' quando estiver pronto
    branches:
      - fd-fix-conteineres-ci
      - qas
      - teste_ci_docker
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do Reposit칩rio
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Criar arquivo de ambiente (.env)
        run: |
          echo "PG_USER=${{ secrets.PG_USER }}" >> .env
          echo "PG_PASS=${{ secrets.PG_PASS }}" >> .env
          echo "PG_DB=${{ secrets.PG_DB }}" >> .env
          # 游눤 CORRE칂츾O: Adicionando DB_PORT para que o docker-compose consiga ler
          # o valor para o mapeamento de portas (ports: - "${DB_PORT}:5432").
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          
          # 游눤 CORRE칂츾O: Usando a porta interna 5432 na DATABASE_URL.
          # Dentro da rede Docker, o cont칡iner backend acessa o servi칞o 'pg-care'
          # sempre na porta padr칚o 5432.
          echo "DATABASE_URL=postgresql://${{ secrets.PG_USER }}:${{ secrets.PG_PASS }}@pg-care:5432/${{ secrets.PG_DB }}" >> .env
          
          echo "Conte칰do do .env:"
          cat .env

      - name: Build dos containers
        run: docker compose build

      - name: Iniciar os containers em background
        run: docker compose up -d

      - name: Aguardar o Banco de Dados (pg-care) ficar pronto
        run: |
          echo "Aguardando o container do banco de dados (pg-care) ficar saud치vel..."
          timeout 120 bash -c 'while [[ "$(docker inspect -f {{.State.Health.Status}} pg-care)" != "healthy" ]]; do echo -n "."; sleep 5; done'
          if [ $? -ne 0 ]; then
            echo "Erro: O banco de dados (pg-care) n칚o ficou saud치vel dentro do tempo limite."
            exit 1
          fi
          echo "Banco de dados est치 pronto!"

      - name: Sincronizar Schema do Prisma para Teste (db push)
        run: |
          echo "Verificando mem칩ria no container backend antes do db push..."
          # Mantendo a verifica칞칚o de mem칩ria (free -m) no container rodando a aplica칞칚o
          docker compose exec -T backend free -m
          
          echo "Iniciando prisma db push (usando 'run --rm' para resolver Exit Code 137)..."
          # 游눤 CORRE칂츾O PRINCIPAL: Usar 'docker compose run --rm' para iniciar um 
          # novo container ef칡mero apenas para o db push.
          docker compose run --rm backend npx prisma db push --accept-data-loss

      - name: Aguardar o backend ficar saud치vel
        run: |
          echo "Aguardando o container do backend ficar saud치vel (aplica칞칚o pronta)..."
          timeout 300 bash -c 'while [[ "$(docker inspect -f {{.State.Health.Status}} backend_dcare)" != "healthy" ]]; do echo -n "."; sleep 5; done'
          if [ $? -ne 0 ]; then
            echo "Erro: O backend n칚o ficou saud치vel dentro do tempo limite."
            exit 1
          fi
          echo "Backend est치 saud치vel!"
          docker compose ps

      - name: Verificar logs dos containers (para depura칞칚o)
        run: docker compose logs

      - name: Executar testes de integra칞칚o/E2E
        run: docker compose exec -T backend npm test

      - name: Parar os containers
        if: always()
        run: docker compose down
