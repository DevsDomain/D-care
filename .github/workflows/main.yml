name: CI Pipeline - D-Care

on:
  push:
    # Mude para 'main' ou 'develop' quando estiver pronto
    branches:
      - fd-fix-conteineres-ci
      - qas
      - teste_ci_docker
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do Repositório
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Passo crucial: Criar o arquivo .env.docker que o docker-compose espera.
      - name: Criar arquivo de ambiente (.env)
        run: |
          echo "PG_USER=${{ secrets.PG_USER }}" >> .env
          echo "PG_PASS=${{ secrets.PG_PASS }}" >> .env
          echo "PG_DB=${{ secrets.PG_DB }}" >> .env
          echo "DATABASE_URL=postgresql://${{ secrets.PG_USER }}:${{ secrets.PG_PASS }}@pg-care:5432/${{ secrets.PG_DB }}" >> .env
          echo "Conteúdo do .env:"
          cat .env
          # O arquivo .env deve ser criado no mesmo diretório do docker-compose.yml

      - name: Build dos containers
        # O build deve ser feito explicitamente
        run: docker compose build

      - name: Iniciar os containers em background
        run: docker compose up -d

      # ----------------------------------------------------------------------
      # NOVOS PASSOS PARA GARANTIR O PREPARO DO BANCO DE DADOS
      # ----------------------------------------------------------------------

      - name: Aguardar o Banco de Dados (pg-care) ficar pronto
        # O comando 'wait' aguarda pelo status 'healthy' definido no healthcheck do container.
        run: |
          echo "Aguardando o container do banco de dados (pg-care) ficar saudável..."
          docker compose wait pg-care --timeout 120
          echo "Banco de dados está pronto!"

      - name: Aplicar Migrações do Prisma
        # Este passo CRIA o schema (incluindo a coluna 'address') no banco de dados limpo.
        run: docker compose exec -T backend npx prisma migrate deploy

      # ----------------------------------------------------------------------
      # FIM DOS NOVOS PASSOS
      # ----------------------------------------------------------------------
      
      - name: Aguardar o backend ficar saudável
        # Usa o 'wait' simples assumindo que o healthcheck está configurado.
        run: |
          echo "Aguardando o container do backend ficar saudável (aguardando a aplicação subir)..."
          docker compose wait backend_dcare --timeout 300
          echo "Backend está saudável!"
          docker compose ps # Mostra o status dos containers

      - name: Verificar logs dos containers (para depuração)
        run: docker compose logs

      - name: Executar testes de integração/E2E
        # Agora o teste deve passar, pois o banco de dados tem o schema correto.
        run: docker compose exec -T backend npm test

      - name: Parar os containers
        # Este passo é executado sempre, mesmo que os testes falhem.
        if: always()
        run: docker compose down
